{"version":3,"sources":["app.module.scss","validators.js","features/dataSlice.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["module","exports","required","value","undefined","number","test","maxLength","length","minLength","firstUpper","firstSymbol","toUpperCase","dataSlice","createSlice","name","initialState","authorized","reducers","setAuthorized","state","action","payload","actions","selectAuthorized","data","App","dispatch","useDispatch","useSelector","renderField","input","placeholder","type","meta","touched","error","warning","className","s","form_content_component","autoComplete","Note","list","LoginForm","props","handleSubmit","pristine","submitting","form","onSubmit","form_content","Field","validate","component","disabled","reduxForm","app","logout","onClick","values","login","password","reducer","combineReducers","formReducer","dataReducer","store","configureStore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8cbfe581.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"app_app__5U76c\",\"list\":\"app_list__3awRY\",\"form\":\"app_form__3qJ3q\",\"form_content\":\"app_form_content__3PK5u\",\"form_content_component\":\"app_form_content_component__3GDtb\",\"error\":\"app_error__3BrBF\",\"logout\":\"app_logout__3UvlL\"};","export const required = value => {\r\n    return value ? undefined : 'Field is required'\r\n}\r\n\r\nexport const number = value => {\r\n    return /[0-9]/.test(value) ? undefined : 'Password must contain numbers'\r\n}\r\n\r\nexport const maxLength = value => {\r\n    return value.length < 15 ? undefined : 'Password length must be less than 15 symbols '\r\n}\r\n\r\nexport const minLength = value => {\r\n    return value.length > 8 ? undefined : 'Password length must be more than 8 symbols '\r\n}\r\n\r\nexport const firstUpper = value => {\r\n    let firstSymbol = value[0];\r\n    return value[0] === firstSymbol.toUpperCase() ? undefined : 'First symbol must be in Upper Case'\r\n}","import { createSlice } from '@reduxjs/toolkit';\n\n\nconst initialState = {\n authorized: false\n};\n\nexport const dataSlice = createSlice({\n  name: 'data',\n  initialState,\n\n  reducers: {\n    setAuthorized: (state, action) => {\n      state.authorized = action.payload;\n    },\n  },\n});\n\nexport const { setAuthorized } = dataSlice.actions;\n\nexport const selectAuthorized = (state) => state.data.authorized;\n\nexport default dataSlice.reducer;\n","import React from 'react';\nimport s from './app.module.scss';\nimport {Field, reduxForm} from \"redux-form\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {firstUpper, maxLength, minLength, number, required} from \"./validators\";\nimport {selectAuthorized, setAuthorized} from \"./features/dataSlice\";\n\n\nfunction App() {\n\n    const dispatch = useDispatch();\n    const authorized = useSelector(selectAuthorized)\n\n    const renderField = ({\n                             input,\n                             placeholder,\n                             type,\n                             meta: {touched, error, warning}\n                         }) => (\n\n        <div className={`${s.form_content_component} ${(error && touched) ? s.error : ''}`}>\n            <input {...input} placeholder={placeholder} autoComplete = 'off' type={type}/>\n            {touched &&\n            ((error && <span>{error}</span>) ||\n                (warning && <span>{warning}</span>))}\n        </div>\n    )\n\n\n    let Note = () => {\n        return <div className={s.list}>\n            <ul>\n                <li>All fields is required</li>\n                <li>Login first symbol must be in Uppercase</li>\n                <li>Password must contain at least one number</li>\n                <li>Password length can't be longer than 15 symbols and less than 8</li>\n            </ul>\n            <p>Login: Testlogin</p>\n            <p>Password: userpassword1</p>\n        </div>\n    }\n\n    let LoginForm = (props) => {\n        const {handleSubmit, pristine, submitting} = props\n        return (\n            <form className={s.form} onSubmit={handleSubmit}>\n                <p>Login Form</p>\n                <div className={s.form_content}>\n                    <Field validate={[required, firstUpper]} type='text' placeholder='Login'\n                           name='login'\n                           component={renderField}/>\n                    <Field validate={[required, number, maxLength, minLength]} placeholder='Password'\n                           name='password' type='password'\n                           component={renderField}/>\n                    <div className={s.form_content_component}>\n                        <button disabled={pristine || submitting} type='submit'>Login</button>\n                    </div>\n                </div>\n            </form>\n        )\n    }\n\n    LoginForm = reduxForm({form: 'login'})(LoginForm)\n\n    const onSubmit = (values) => {\n        if (values.login === 'Testlogin' && values.password === 'userpassword1') {\n            dispatch(setAuthorized(true))\n        }\n    }\n\n    return (\n        <div className={s.app}>\n            {!authorized ? <LoginForm onSubmit={onSubmit}/> : <div className={s.form}>\n                <button className={s.logout} onClick={() => dispatch(setAuthorized(false))}>Log out</button>\n            </div>}\n            <Note/>\n        </div>\n    );\n}\n\nexport default App;\n","import {combineReducers, configureStore} from '@reduxjs/toolkit';\nimport {reducer as formReducer} from 'redux-form';\nimport dataReducer from '../features/dataSlice'\n\nconst reducer = combineReducers({\n    form: formReducer,\n    data: dataReducer\n})\n\nexport const store = configureStore({\n    reducer\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}